language: python
python:
    - "3.5"
    - "3.6"
    - "3.7"
 
notifications:
    email:
        recipients:
            - balterma@umich.edu
        on_success: change  # always|never|change
        on_failure: always

 
# # command to install dependenciespy
# script: python solarwindpy/run_tests.py
# branches:
#   only:
#     - master

# after_success:
#     - codecov

# # command to install dependencies
# install:
#   - pip install -r requirements.txt
#   - pip install .
# # command to run tests


# sudo: false

# env:
#     global:

#         # The following versions are the 'default' for tests, unless
#         # overridden underneath. They are defined here in order to save having
#         # to repeat them for all configurations.
#         - PYTHON_VERSION=3.7
#         - NUMPY_VERSION=stable
#         - PANDAS_VERSION=stable
#         - MAIN_CMD="python setup.py"
#         - SETUP_CMD="test"
#         - EVENT_TYPE="pull_request push"

#         # If you want to ignore certain flake8 errors, you can list them
#         # in FLAKE8_OPT, for example:
#         # - FLAKE8_OPT='--ignore=E501'
#         - FLAKE8_OPT=""

# matrix:

#     # Don't wait for allowed failures
#     fast_finish: true

#     include:
#         # Try MacOS X
#         - os: osx
#           env: SETUP_CMD="test"

#         # Do a coverage test.
#         - os: linux
#           env: SETUP_CMD="test --coverage"

#         # Try all python versions and Numpy versions. Since we can assume that
#         # the Numpy developers have taken care of testing Numpy with different
#         # versions of Python, we can vary Python and Numpy versions at the same
#         # time.
        
#         - os: linux
#           env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.13
#         - os: linux
#           env: NUMPY_VERSION=1.14

#         # Try numpy pre-release
#         - os: linux
#           env: NUMPY_VERSION=prerelease
#                EVENT_TYPE="pull_request push cron"

#         # Do a PEP8 test with flake8
#         - os: linux
#           env: MAIN_CMD="flake8 solarwindpy --count --show-source --statistics $FLAKE8_OPT" SETUP_CMD=""

#     allow_failures:
#         # Do a PEP8 test with flake8
#         # (allow to fail unless your code completely compliant)
#         - os: linux
#           env: MAIN_CMD="flake8 solarwindpy --count --show-source --statistics $FLAKE8_OPT" SETUP_CMD=""

# install:

#     # We now use the ci-helpers package to set up our testing environment.
#     # This is done by using Miniconda and then using conda and pip to install
#     # dependencies. Which dependencies are installed using conda and pip is
#     # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
#     # which should be space-delimited lists of package names. See the README
#     # in https://github.com/astropy/ci-helpers for information about the full
#     # list of environment variables that can be used to customize your
#     # environment. In some cases, ci-helpers may not offer enough flexibility
#     # in how to install a package, in which case you can have additional
#     # commands in the install: section below.

#     - git clone --depth 1 git://github.com/astropy/ci-helpers.git
#     - source ci-helpers/travis/setup_conda.sh

#     # As described above, using ci-helpers, you should be able to set up an
#     # environment with dependencies installed using conda and pip, but in some
#     # cases this may not provide enough flexibility in how to install a
#     # specific dependency (and it will not be able to install non-Python
#     # dependencies). Therefore, you can also include commands below (as
#     # well as at the start of the install section or in the before_install
#     # section if they are needed before setting up conda) to install any
#     # other dependencies.

# script:
#    - $MAIN_CMD $SETUP_CMD
