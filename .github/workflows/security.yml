name: Security Scan

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install bandit[toml] safety pip-audit
      
      - name: Run Bandit security scan
        run: |
          bandit -r solarwindpy -ll -f json -o bandit-report.json
          bandit -r solarwindpy -ll
        continue-on-error: true
      
      - name: Run Safety check
        run: |
          pip install -r requirements-dev.txt
          safety check --json > safety-report.json
          safety check
        continue-on-error: true
      
      - name: Run pip-audit
        run: |
          pip-audit --requirement requirements-dev.txt --format json > pip-audit-report.json
          pip-audit --requirement requirements-dev.txt
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
          retention-days: 90
      
      - name: Check for critical vulnerabilities
        run: |
          # Parse reports and fail if critical issues found
          python -c "
          import json
          import sys
          
          critical = False
          
          # Check bandit report
          try:
              with open('bandit-report.json') as f:
                  bandit = json.load(f)
                  high_severity = [r for r in bandit.get('results', []) 
                                   if r.get('issue_severity') == 'HIGH']
                  if high_severity:
                      print(f'Found {len(high_severity)} high severity issues in Bandit scan')
                      critical = True
          except Exception as e:
              print(f'Could not parse bandit report: {e}')
          
          if critical:
              sys.exit(1)
          "