name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger for testing
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      dry_run:
        description: 'Dry run (build only, no upload)'
        required: false
        default: true
        type: boolean

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for setuptools_scm
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Verify tag format and version consistency
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if ! [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-z]+[0-9]+)?$ ]]; then
            echo "Error: Tag $TAG does not match version pattern v*.*.* or v*.*.*rc* (e.g., v1.0.0, v1.0.0rc1)"
            echo "Use format: vX.Y.Z for releases, vX.Y.ZrcN for release candidates (no dash)"
            exit 1
          fi
          
          # Install setuptools_scm to check version consistency
          pip install setuptools_scm
          
          # Get version from setuptools_scm
          DETECTED_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
          EXPECTED_VERSION=${TAG#v}  # Remove 'v' prefix
          
          if [ "$DETECTED_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "  Git tag version: $EXPECTED_VERSION"
            echo "  setuptools_scm detected: $DETECTED_VERSION"
            echo "Ensure tag version matches setuptools_scm configuration"
            exit 1
          fi
          
          echo "‚úÖ Publishing version $TAG (verified: $DETECTED_VERSION)"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements-dev.txt
          pip install -e .  # Install solarwindpy package for testing
      
      - name: Run full test suite
        run: |
          flake8 solarwindpy/
          pytest -q
      
      - name: Build package
        run: python -m build
      
      - name: Check package with twine
        run: twine check dist/*
      
      - name: Verify package contents
        run: |
          echo "Built packages:"
          ls -la dist/
          echo ""
          echo "Package contents:"
          tar -tzf dist/*.tar.gz | head -20
          echo ""
          echo "Wheel contents:"
          unzip -l dist/*.whl | head -20
      
      # TestPyPI deployment (for testing)
      # Release candidates go to test
      - name: Publish to TestPyPI
        if: |
          (github.event_name == 'workflow_dispatch' && 
           github.event.inputs.target == 'testpypi' && 
           github.event.inputs.dry_run != 'true') ||
          (github.event_name == 'push' && 
           startsWith(github.ref, 'refs/tags/') && 
           contains(github.ref, 'rc'))  
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
        continue-on-error: true  # Don't fail if token not configured yet
      
      - name: TestPyPI Status Check
        if: failure() && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'rc'))
        run: |
          echo "‚ö†Ô∏è  TestPyPI publication failed (likely due to missing token)"
          echo ""
          echo "üîß To enable TestPyPI publishing:"
          echo "   1. Go to https://test.pypi.org/manage/account/token/"
          echo "   2. Create a new API token with scope 'Entire account'"
          echo "   3. Add token as repository secret 'TEST_PYPI_API_TOKEN'"
          echo "   4. Re-run this workflow or create a new tag"
          echo ""
          echo "üì¶ Package was built successfully and is available in workflow artifacts"
      
      # Production PyPI deployment (only for non-RC tags)
      - name: Publish to PyPI
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'pypi' && github.event.inputs.dry_run != 'true') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc'))
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
        continue-on-error: true  # Don't fail if token not configured yet
      
      - name: PyPI Status Check
        if: failure() && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc'))
        run: |
          echo "‚ö†Ô∏è  PyPI publication failed (likely due to missing token)"
          echo ""
          echo "üîß To enable PyPI publishing:"
          echo "   1. Go to https://pypi.org/manage/account/token/"
          echo "   2. Create a new API token with scope 'Entire account'"
          echo "   3. Add token as repository secret 'PYPI_API_TOKEN'"
          echo "   4. Re-run this workflow or create a new tag"
          echo ""
          echo "üì¶ Package was built successfully and is available in workflow artifacts"
          echo "üö® Production releases require manual PyPI token configuration"
      
      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.whl
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'dev') }}
          name: "SolarWindPy ${{ github.ref_name }}"
          body: |
            ## üöÄ SolarWindPy Release ${{ github.ref_name }}
            
            **Version**: `${{ github.ref_name }}`
            **Commit**: ${{ github.sha }}
            **Build Date**: ${{ github.run_started_at }}
            
            ### üì¶ Installation
            ```bash
            pip install solarwindpy==${{ github.ref_name }}
            ```
            
            ### üîç Package Verification  
            ```python
            import solarwindpy
            print(solarwindpy.__version__)  # Should show ${{ github.ref_name }}
            ```
            
            ### üìã What's Included
            - **Source Distribution** (`.tar.gz`): Full source code with setup metadata
            - **Wheel Package** (`.whl`): Pre-built binary distribution for faster installation
            
            ---
            *Auto-generated release from GitHub Actions*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
