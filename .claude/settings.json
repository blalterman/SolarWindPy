{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(conda info:*)",
      "Bash(echo $CONDA_DEFAULT_ENV)",
      "Bash(doc8:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(gh run view:*)",
      "Bash(gh run list:*)",
      "Bash(gh workflow run list:*)",
      
      "Bash(.claude/hooks/test-runner.sh)",
      "Bash(.claude/hooks/test-runner.sh --all)",
      "Bash(.claude/hooks/test-runner.sh --changed)",
      "Bash(.claude/hooks/test-runner.sh --physics)",
      "Bash(.claude/hooks/test-runner.sh --fast)",
      "Bash(.claude/hooks/test-runner.sh --coverage)",
      "Bash(.claude/hooks/test-runner.sh --help)",
      "Bash(python .claude/hooks/coverage-monitor.py)",
      "Bash(.claude/hooks/pre-commit-tests.sh)",
      "Bash(.claude/hooks/git-workflow-validator.sh)",
      "Bash(.claude/hooks/git-workflow-validator.sh --enforce-branch)",
      "Bash(.claude/hooks/git-workflow-validator.sh --check-tests)", 
      "Bash(.claude/hooks/git-workflow-validator.sh --validate-message)",
      "Bash(.claude/hooks/validate-session-state.sh)",
      "Bash(python .claude/hooks/physics-validation.py)",
      "Bash(python .claude/hooks/physics-validation.py solarwindpy/**/*.py)",
      "Bash(python .claude/hooks/physics-validation.py --strict)",
      "Bash(python .claude/hooks/physics-validation.py --report)",
      "Bash(python .claude/hooks/physics-validation.py --fix)",
      "Bash(python .claude/hooks/create-compaction.py)",
      "Bash(python .claude/scripts/generate-test.py)",
      "Bash(python .claude/scripts/generate-test.py *)",
      
      "Bash(pytest --cov=solarwindpy)",
      "Bash(pytest --cov=solarwindpy --cov-report=:*)",
      "Bash(pytest --cov=solarwindpy --cov-report=html -q)",
      "Bash(pytest --cov=solarwindpy --cov-report=term -q)",
      "Bash(pytest --cov=solarwindpy --cov-report=xml -q)",
      "Bash(pytest --cov=solarwindpy --cov-report=html -q --tb=short)",
      "Bash(pytest --cov=solarwindpy --cov-report=term -q --tb=short)",
      "Bash(pytest --cov=solarwindpy --cov-report=xml -q --tb=short)",
      "Bash(pytest -q)",
      "Bash(pytest -v)",
      "Bash(pytest tests/*)",
      "Bash(pytest solarwindpy/*)",
      "Bash(pytest:*)",
      
      "Bash(git add solarwindpy/**)",
      "Bash(git add tests/**)",
      "Bash(git add .claude/**)", 
      "Bash(git add solarwindpy/**/*.py)",
      "Bash(git add tests/**/*.py)",
      "Bash(git add .claude/**/*.py)",
      "Bash(git add README.md)",
      "Bash(git add CHANGELOG.md)", 
      "Bash(git add CLAUDE.md)",
      "Bash(git add setup.py)",
      "Bash(git add pyproject.toml)",
      "Bash(git add solarwindpy.yml)",
      "Bash(git add solarwindpy-dev.yml)",
      "Bash(git add requirements.txt)",
      "Bash(git add requirements-dev.txt)",
      "Bash(git add .gitignore)",
      "Bash(git add conda-recipe/meta.yaml)",
      "Bash(git status)",
      "Bash(git diff)",
      "Bash(git log)",
      "Bash(git log --oneline)",
      "Bash(git log -n :*)",
      "Bash(git commit)",
      "Bash(git commit -m :*)",
      "Bash(git push)",
      "Bash(git push origin :*)",
      "Bash(git checkout :*)",
      "Bash(git branch)",
      "Bash(git branch -a)",
      
      "Bash(find solarwindpy/ -name *.py -type f)",
      "Bash(find tests/ -name *.py -type f)",
      "Bash(find .claude/ -name *.py -type f)",
      "Bash(find .claude/ -name *.sh -type f)",
      
      "Bash(black:*)",
      "Bash(black solarwindpy/)",
      "Bash(black tests/)",
      "Bash(black solarwindpy/ tests/)",
      "Bash(flake8:*)",
      "Bash(flake8 solarwindpy/)",
      "Bash(flake8 tests/)",
      "Bash(flake8 solarwindpy/ tests/)",
      
      "Bash(python scripts/update_conda_recipe.py)",
      "Bash(python scripts/requirements_to_conda_env.py)",
      "Bash(python scripts/requirements_to_conda_env.py --name :*)",
      
      "Bash(conda env create -f solarwindpy.yml)",
      "Bash(conda env create -f solarwindpy-dev.yml)",
      "Bash(conda activate :*)",
      "Bash(pip install -e .)",
      "Bash(pre-commit:*)",
      "Bash(tox:*)",
      
      "Bash(mkdir -p .claude/logs)",
      "Bash(mkdir -p .claude/backups)",
      "Bash(touch .claude/logs/security-audit.log)"
    ],
    "deny": [
      "Read(./.env*)",
      "Read(./secrets/**)",
      "Read(./.token*)",
      "Read(~/.ssh/**)",
      "Read(/etc/**)",
      "Edit(./.env*)",
      "Edit(./secrets/**)",
      "Edit(./.token*)",
      "Edit(~/.ssh/**)",
      "Write(./.env*)",
      "Write(./secrets/**)",
      "Write(./.token*)",
      "Write(~/.ssh/**)",
      
      "Bash(rm -rf :*)",
      "Bash(chmod +x :*)",
      "Bash(sudo :*)",
      "Bash(curl :*)",
      "Bash(wget :*)",
      "Bash(pip install :*)",
      "Bash(conda install :*)",
      
      "WebFetch(domain:!docs.anthropic.com)",
      
      "Bash(eval :*)",
      "Bash(exec :*)", 
      "Bash(source :*)",
      "Bash(. :*)",
      "Bash(git add ~/.ssh/**)",
      "Bash(git add /etc/**)",
      "Bash(git add secrets/**)",
      "Bash(git add .env:*)"
    ]
  },
  "statusLine": {
    "type": "command",
    "command": ".claude/statusline.sh",
    "padding": 0
  },
  "systemPrompt": "You are working on SolarWindPy, a scientific Python package for solar wind plasma physics analysis. CRITICAL WORKFLOW: Before ANY development work: 1) List all unmerged branches with `git branch -r --no-merged master`; 2) Ask user 'Which branch should I use? Please specify branch name, or say \"search\" if you want me to help find an appropriate branch, or say \"new\" to create a new branch'; 3) Wait for explicit user instruction - NEVER auto-select a branch; 4) If user says \"search\", help identify relevant branches by content/purpose; 5) If user says \"new\", create feature/* branch from GitHub Issues following GitHub Issues → feature/* → PR → master progression. Never work directly on master. Always follow development guidelines in CLAUDE.md. Run tests with `pytest -q`, format code with `black .`, and lint with `flake8`. All tests must pass before committing. Use NumPy-style docstrings and follow Conventional Commits format. Include 'Generated with Claude Code' attribution in commits.",
  "tools": {
    "enabled": [
      "Bash",
      "Edit",
      "Read", 
      "Write",
      "Glob",
      "Grep",
      "TodoWrite"
    ],
    "disabled": []
  },
  "ai": {
    "preferredModel": "claude-sonnet-4-20250514"
  },
  "planningMode": true,
  "hooks": {
    "SessionStart": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/validate-session-state.sh",
            "timeout": 30
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "*plan*",
        "hooks": [
          {
            "type": "command", 
            "command": "bash .claude/hooks/git-workflow-validator.sh --enforce-branch",
            "timeout": 15
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/git-workflow-validator.sh",
            "args": ["${command}"],
            "timeout": 15,
            "blocking": true
          }
        ],
        "condition": "${command.startsWith('git ') || command.startsWith('gh ')}"
      },
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/physics-validation.py",
            "args": ["${file_path}"],
            "timeout": 45
          }
        ]
      },
      {
        "matcher": "MultiEdit", 
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/physics-validation.py",
            "args": ["${file_path}"],
            "timeout": 45
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/physics-validation.py",
            "args": ["${file_path}"],
            "timeout": 45
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/test-runner.sh --changed",
            "timeout": 120
          }
        ]
      },
      {
        "matcher": "MultiEdit",
        "hooks": [
          {
            "type": "command", 
            "command": "bash .claude/hooks/test-runner.sh --changed",
            "timeout": 120
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/test-runner.sh --changed",
            "timeout": 120
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/create-compaction.py",
            "timeout": 30
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "*", 
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/coverage-monitor.py",
            "timeout": 60
          }
        ]
      }
    ]
  }
}